cache:
   paths:
      - frontend/dist


variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
  

stages:
   - build
   - test
   - release
   - deploy
   - notify


build-frontend:
   stage: build
   image:
      name: gcr.io/kaniko-project/executor:v1.23.2-debug
      entrypoint: [""]
   # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
   script:
      - echo "Kaniko Build Momo Store Frontend"
      - /kaniko/executor
         --context "${CI_PROJECT_DIR}/frontend"
         --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
         --destination "${CI_REGISTRY_IMAGE}/momo-frontend:${CI_COMMIT_SHA}"
         --build-arg VERSION=${VERSION}
         --cache=true


semgrep-sast:
   stage: test
   needs:
      - build-frontend
   trigger:
      include:
         - template: Security/SAST.gitlab-ci.yml


sonarqube-frontend-sast:
   stage: test
   needs:
      - build-frontend
   image:
      name: sonarsource/sonar-scanner-cli:latest
      entrypoint: [""]
   variables:
      SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
      GIT_DEPTH: "0"
   cache:
      key: "${CI_JOB_NAME}"
      paths:
         - .sonar/cache
   script:
      - >
         sonar-scanner
         -Dsonar.qualitygate.wait=true
         -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
         -Dsonar.host.url=${SONARQUBE_URL}
         -Dsonar.login=${SONAR_LOGIN}
         -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONT}
         -Dsonar.sources=frontend/src
   allow_failure: true


upload-frontend:
   stage: release
   # needs:
   #    - semgrep-sast
   #    - sonarqube-frontend-sast
   variables:
      GIT_STRATEGY: none
   image:
      name: gcr.io/go-containerregistry/crane:debug
      entrypoint: [""]
   cache: [ ]
   before_script:
      - crane auth login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
   script:
      - crane tag ${CI_REGISTRY_IMAGE}/momo-frontend:${CI_COMMIT_SHA} ${VERSION}


deploy-frontend:
   stage: deploy
   needs:
      - upload-frontend
   image: docker:24.0.7-alpine3.19
   before_script:
      - apk add docker-cli-compose openssh-client bash
      - eval $(ssh-agent -s)
      - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 600 ~/.ssh
      - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
   script:
      - echo "VERSION=${VERSION}" >> deploy.env
      - echo "REPORT_PATH=/var/www-data/htdocs" >> deploy.env
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - >
         docker --context remote compose --env-file deploy.env up frontend 
         -d --pull "always" --force-recreate
   rules: # Запускаем джобу вручную.
      - when: manual
   environment:
      name: production/momo-store


telegram-notification-frontend:
   stage: notify
   needs:
      - upload-frontend
   rules:
      - if: $CI_COMMIT_MESSAGE =~ /send notification/
   script:
      - >
         curl -X POST -H "Content-type: application/json"
         --data "{\"chat_id\": \"-1002100383038\", \"text\": \"Казанов Максим загрузил frontend в Nexus. Скачать ${SCV}\"}"
         https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
